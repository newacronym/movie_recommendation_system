# -*- coding: utf-8 -*-
"""Movie_recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X1x2X5YwTtIyzzgIEXsIIQcG82YOcrEZ
"""

import numpy as np
import pandas as pd
import ast
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import nltk

movies = pd.read_csv('tmdb_5000_movies.csv')
credits = pd.read_csv('tmdb_5000_credits.csv')

movies.head(1)

credits.head(1)

movies = movies.merge(credits, on='title')

# Important titles
# genres
# id
# keywords
# title
# overview

movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]

movies.head()

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres
# Need to convert the genre in better format

def convert_function(obj):
  list_genre = []
  for i in ast.literal_eval(obj):
    list_genre.append(i['name'])
  return list_genre

movies['genres'] = movies['genres'].apply(convert_function)
movies.head()

movies['keywords'] = movies['keywords'].apply(convert_function)
movies.head()

def convert_cast(obj):
  list_cast = []
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      list_cast.append(i['name'])
      counter +=1
    else:
      break;
  return list_cast

movies['cast'] = movies['cast'].apply(convert_cast)

movies.head()

def fetch_director(obj):
  list_director = []
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      list_director.append(i['name'])
      break
  return list_director

movies['crew'] = movies['crew'].apply(fetch_director)

movies.head()

movies['overview'] = movies['overview'].apply(lambda x: x.split())

movies.head()

movies['genres'] = movies['genres'].apply(lambda x: [i.replace(" ", "") for i in x])
movies['keywords'] = movies['keywords'].apply(lambda x: [i.replace(" ", "") for i in x])
movies['crew'] = movies['crew'].apply(lambda x: [i.replace(" ", "") for i in x])
movies['cast'] = movies['cast'].apply(lambda x: [i.replace(" ", "") for i in x])

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

movies.head()

movie_df = movies[['movie_id', 'title', 'tags']]

movie_df['tags'] = movie_df['tags'].apply(lambda x: " ".join(x))

movie_df.head()

movie_df['tags'] = movie_df['tags'].apply(lambda x: x.lower())

# Stemming
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  res = []

  for i in text.split():
    res.append(ps.stem(i))

  return " ".join(res)

movie_df['tags'] = movie_df['tags'].apply(stem)

# Converting tags into Vectors

cv = CountVectorizer(max_features=5000, stop_words='english')

vectors = cv.fit_transform(movie_df['tags']).toarray()

# Cosine Similarity
similarity = cosine_similarity(vectors)



# Recommendation Function
def recommend(movie):
  movie_index = movie_df[movie_df['title'] == movie].index[0]
  distances = similarity[movie_index]
  movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

  for i in movies_list:
    print(movie_df.iloc[i[0]].title)

# Testing
recommend('Avatar')

import pickle

pickle.dump(movie_df, open('movies.pkl', 'wb'))

pickle.dump(movie_df.to_dict(), open('movie_dict.pkl', 'wb'))

pickle.dump(similarity, open('similarity.pkl', 'wb'))
